"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertWavHeaderToBuffer = exports.getWavHeader = exports.getDefaultWavHeader = exports.WAV_AUDIO_FORMAT_PCM = exports.WAV_DATA_SUBCHUNK_ID = exports.WAV_FMT_SUBCHUNK_ID = exports.WAV_FORMAT = exports.WAV_CHUNK_ID = void 0;
const smart_buffer_1 = require("smart-buffer");
exports.WAV_CHUNK_ID = 'RIFF';
exports.WAV_FORMAT = 'WAVE';
exports.WAV_FMT_SUBCHUNK_ID = 'fmt ';
exports.WAV_DATA_SUBCHUNK_ID = 'data';
exports.WAV_AUDIO_FORMAT_PCM = 1;
exports.getDefaultWavHeader = () => {
    return {
        audioFormat: 0,
        numChannels: 0,
        sampleRate: 0,
        byteRate: 0,
        blockAlign: 0,
        bitsPerSample: 0,
        extraData: Buffer.from(''),
        headerLength: 44,
    };
};
exports.getWavHeader = (audioFormat, numChannels, sampleRate, bitsPerSample, extraData) => {
    return {
        audioFormat: audioFormat,
        numChannels: numChannels,
        sampleRate: sampleRate,
        byteRate: sampleRate * numChannels * bitsPerSample / 8,
        blockAlign: numChannels * bitsPerSample / 8,
        bitsPerSample: bitsPerSample,
        extraData: (extraData ? extraData : Buffer.from('')),
        headerLength: 44 +
            (extraData && extraData.length != 0 ? extraData.length + 2 : 0),
    };
};
exports.convertWavHeaderToBuffer = (wavHeader, fileLength) => {
    if (wavHeader.audioFormat == 1 && wavHeader.extraData.length != 0) {
        return Error('Invalid header. PCM does not support extra data');
    }
    const buffer = new smart_buffer_1.SmartBuffer();
    buffer.writeString(exports.WAV_CHUNK_ID);
    buffer.writeUInt32LE(fileLength + wavHeader.headerLength - 8);
    buffer.writeString(exports.WAV_FORMAT);
    buffer.writeString(exports.WAV_FMT_SUBCHUNK_ID);
    let subChunk1Size = 16;
    if (wavHeader.extraData.length != 0) {
        subChunk1Size += 2;
        subChunk1Size += wavHeader.extraData.length;
    }
    buffer.writeUInt32LE(subChunk1Size);
    buffer.writeUInt16LE(wavHeader.audioFormat);
    buffer.writeUInt16LE(wavHeader.numChannels);
    buffer.writeUInt32LE(wavHeader.sampleRate);
    buffer.writeUInt32LE(wavHeader.byteRate);
    buffer.writeUInt16LE(wavHeader.blockAlign);
    buffer.writeUInt16LE(wavHeader.bitsPerSample);
    if (wavHeader.extraData.length != 0) {
        buffer.writeUInt16LE(wavHeader.extraData.length, 0);
        buffer.writeBuffer(wavHeader.extraData);
    }
    buffer.writeString(exports.WAV_DATA_SUBCHUNK_ID);
    buffer.writeUInt32LE(fileLength);
    return buffer.toBuffer();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F2LWhlYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvd2F2LWhlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBMkM7QUFDOUIsUUFBQSxZQUFZLEdBQUcsTUFBTSxDQUFDO0FBQ3RCLFFBQUEsVUFBVSxHQUFHLE1BQU0sQ0FBQztBQUNwQixRQUFBLG1CQUFtQixHQUFHLE1BQU0sQ0FBQztBQUM3QixRQUFBLG9CQUFvQixHQUFHLE1BQU0sQ0FBQztBQUU5QixRQUFBLG9CQUFvQixHQUFHLENBQUMsQ0FBQztBQW9CekIsUUFBQSxtQkFBbUIsR0FBRyxHQUFjLEVBQUU7SUFDL0MsT0FBTztRQUNILFdBQVcsRUFBRSxDQUFDO1FBQ2QsV0FBVyxFQUFFLENBQUM7UUFDZCxVQUFVLEVBQUUsQ0FBQztRQUNiLFFBQVEsRUFBRSxDQUFDO1FBQ1gsVUFBVSxFQUFFLENBQUM7UUFDYixhQUFhLEVBQUUsQ0FBQztRQUNoQixTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDMUIsWUFBWSxFQUFFLEVBQUU7S0FDbkIsQ0FBQztBQUNOLENBQUMsQ0FBQTtBQUVZLFFBQUEsWUFBWSxHQUFHLENBQ3hCLFdBQW1CLEVBQ25CLFdBQW1CLEVBQ25CLFVBQWtCLEVBQ2xCLGFBQXFCLEVBQ3JCLFNBQWtCLEVBQWEsRUFBRTtJQUNqQyxPQUFPO1FBQ0gsV0FBVyxFQUFFLFdBQVc7UUFDeEIsV0FBVyxFQUFFLFdBQVc7UUFDeEIsVUFBVSxFQUFFLFVBQVU7UUFDdEIsUUFBUSxFQUFFLFVBQVUsR0FBRyxXQUFXLEdBQUcsYUFBYSxHQUFHLENBQUM7UUFDdEQsVUFBVSxFQUFFLFdBQVcsR0FBRyxhQUFhLEdBQUcsQ0FBQztRQUMzQyxhQUFhLEVBQUUsYUFBYTtRQUM1QixTQUFTLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNwRCxZQUFZLEVBQUUsRUFBRTtZQUNaLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3RFLENBQUE7QUFDTCxDQUFDLENBQUE7QUFFWSxRQUFBLHdCQUF3QixHQUNqQyxDQUFDLFNBQW9CLEVBQUUsVUFBa0IsRUFBa0IsRUFBRTtJQUN6RCxJQUFJLFNBQVMsQ0FBQyxXQUFXLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtRQUMvRCxPQUFPLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0tBQ25FO0lBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSwwQkFBVyxFQUFFLENBQUM7SUFFakMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxvQkFBWSxDQUFDLENBQUM7SUFDakMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM5RCxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFVLENBQUMsQ0FBQztJQUMvQixNQUFNLENBQUMsV0FBVyxDQUFDLDJCQUFtQixDQUFDLENBQUM7SUFDeEMsSUFBSSxhQUFhLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1FBQ2pDLGFBQWEsSUFBSSxDQUFDLENBQUM7UUFDbkIsYUFBYSxJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0tBQy9DO0lBQ0QsTUFBTSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNwQyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM1QyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUMzQyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMzQyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMzQyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM5QyxJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtRQUNqQyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQzNDO0lBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyw0QkFBb0IsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDakMsT0FBTyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDN0IsQ0FBQyxDQUFBIn0=