import * as fs from 'fs';
import test from 'ava';
import { parseHeader, parseHeaderFromBuffer, } from './wav-header-parser';
const EXT_WAV_EXTRA_DATA = [8, 0, 3, 0, 0, 0, 6, 0, 0, 0, 0, 0,
    16, 0, 128, 0, 0, 170, 0, 56, 155, 113];
test('parseHeader_pcm', (t) => {
    const expected = {
        audioFormat: 1,
        numChannels: 1,
        sampleRate: 44100,
        byteRate: 88200,
        blockAlign: 2,
        bitsPerSample: 16,
        extraData: Buffer.from(''),
        headerLength: 44
    };
    t.deepEqual(parseHeader(__dirname + '/testfiles/testfile.wav'), expected);
});
test('parseHeader_extensible', (t) => {
    const expected = {
        audioFormat: 65534,
        numChannels: 2,
        sampleRate: 8000,
        byteRate: 16000,
        blockAlign: 2,
        bitsPerSample: 8,
        extraData: Buffer.from(EXT_WAV_EXTRA_DATA),
        headerLength: 80
    };
    t.deepEqual(parseHeader(__dirname + '/testfiles/testfile2.wav'), expected);
});
test('parseHeaderFromBuffer_pcm', (t) => {
    const expected = {
        audioFormat: 1,
        numChannels: 1,
        sampleRate: 44100,
        byteRate: 88200,
        blockAlign: 2,
        bitsPerSample: 16,
        extraData: Buffer.from(''),
        headerLength: 44
    };
    const fileBuffer = fs.readFileSync(__dirname + '/testfiles/testfile.wav');
    t.deepEqual(parseHeaderFromBuffer(fileBuffer), expected);
});
test('parseHeaderFromBuffer_extensible', (t) => {
    const expected = {
        audioFormat: 65534,
        numChannels: 2,
        sampleRate: 8000,
        byteRate: 16000,
        blockAlign: 2,
        bitsPerSample: 8,
        extraData: Buffer.from(EXT_WAV_EXTRA_DATA),
        headerLength: 80
    };
    const fileBuffer = fs.readFileSync(__dirname + '/testfiles/testfile2.wav');
    t.deepEqual(parseHeaderFromBuffer(fileBuffer), expected);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F2LWhlYWRlci1wYXJzZXIuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvd2F2LWhlYWRlci1wYXJzZXIuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUV6QixPQUFPLElBQUksTUFBTSxLQUFLLENBQUM7QUFHdkIsT0FBTyxFQUNILFdBQVcsRUFDWCxxQkFBcUIsR0FDeEIsTUFBTSxxQkFBcUIsQ0FBQztBQUU3QixNQUFNLGtCQUFrQixHQUNwQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUMvQixFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUVoRCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUMxQixNQUFNLFFBQVEsR0FBYztRQUN4QixXQUFXLEVBQUUsQ0FBQztRQUNkLFdBQVcsRUFBRSxDQUFDO1FBQ2QsVUFBVSxFQUFFLEtBQUs7UUFDakIsUUFBUSxFQUFFLEtBQUs7UUFDZixVQUFVLEVBQUUsQ0FBQztRQUNiLGFBQWEsRUFBRSxFQUFFO1FBQ2pCLFNBQVMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUMxQixZQUFZLEVBQUUsRUFBRTtLQUNuQixDQUFDO0lBQ0YsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxHQUFHLHlCQUF5QixDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDOUUsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNqQyxNQUFNLFFBQVEsR0FBYztRQUN4QixXQUFXLEVBQUUsS0FBSztRQUNsQixXQUFXLEVBQUUsQ0FBQztRQUNkLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLFFBQVEsRUFBRSxLQUFLO1FBQ2YsVUFBVSxFQUFFLENBQUM7UUFDYixhQUFhLEVBQUUsQ0FBQztRQUNoQixTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztRQUMxQyxZQUFZLEVBQUUsRUFBRTtLQUNuQixDQUFDO0lBQ0YsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxHQUFHLDBCQUEwQixDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDL0UsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNwQyxNQUFNLFFBQVEsR0FBYztRQUN4QixXQUFXLEVBQUUsQ0FBQztRQUNkLFdBQVcsRUFBRSxDQUFDO1FBQ2QsVUFBVSxFQUFFLEtBQUs7UUFDakIsUUFBUSxFQUFFLEtBQUs7UUFDZixVQUFVLEVBQUUsQ0FBQztRQUNiLGFBQWEsRUFBRSxFQUFFO1FBQ2pCLFNBQVMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUMxQixZQUFZLEVBQUUsRUFBRTtLQUNuQixDQUFDO0lBQ0YsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcseUJBQXlCLENBQUMsQ0FBQztJQUMxRSxDQUFDLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzdELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDM0MsTUFBTSxRQUFRLEdBQWM7UUFDeEIsV0FBVyxFQUFFLEtBQUs7UUFDbEIsV0FBVyxFQUFFLENBQUM7UUFDZCxVQUFVLEVBQUUsSUFBSTtRQUNoQixRQUFRLEVBQUUsS0FBSztRQUNmLFVBQVUsRUFBRSxDQUFDO1FBQ2IsYUFBYSxFQUFFLENBQUM7UUFDaEIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFDMUMsWUFBWSxFQUFFLEVBQUU7S0FDbkIsQ0FBQztJQUNGLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxHQUFHLDBCQUEwQixDQUFDLENBQUM7SUFDM0UsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM3RCxDQUFDLENBQUMsQ0FBQyJ9