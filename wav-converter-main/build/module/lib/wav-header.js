import { SmartBuffer } from 'smart-buffer';
export const WAV_CHUNK_ID = 'RIFF';
export const WAV_FORMAT = 'WAVE';
export const WAV_FMT_SUBCHUNK_ID = 'fmt ';
export const WAV_DATA_SUBCHUNK_ID = 'data';
export const WAV_AUDIO_FORMAT_PCM = 1;
export const getDefaultWavHeader = () => {
    return {
        audioFormat: 0,
        numChannels: 0,
        sampleRate: 0,
        byteRate: 0,
        blockAlign: 0,
        bitsPerSample: 0,
        extraData: Buffer.from(''),
        headerLength: 44,
    };
};
export const getWavHeader = (audioFormat, numChannels, sampleRate, bitsPerSample, extraData) => {
    return {
        audioFormat: audioFormat,
        numChannels: numChannels,
        sampleRate: sampleRate,
        byteRate: sampleRate * numChannels * bitsPerSample / 8,
        blockAlign: numChannels * bitsPerSample / 8,
        bitsPerSample: bitsPerSample,
        extraData: (extraData ? extraData : Buffer.from('')),
        headerLength: 44 +
            (extraData && extraData.length != 0 ? extraData.length + 2 : 0),
    };
};
export const convertWavHeaderToBuffer = (wavHeader, fileLength) => {
    if (wavHeader.audioFormat == 1 && wavHeader.extraData.length != 0) {
        return Error('Invalid header. PCM does not support extra data');
    }
    const buffer = new SmartBuffer();
    buffer.writeString(WAV_CHUNK_ID);
    buffer.writeUInt32LE(fileLength + wavHeader.headerLength - 8);
    buffer.writeString(WAV_FORMAT);
    buffer.writeString(WAV_FMT_SUBCHUNK_ID);
    let subChunk1Size = 16;
    if (wavHeader.extraData.length != 0) {
        subChunk1Size += 2;
        subChunk1Size += wavHeader.extraData.length;
    }
    buffer.writeUInt32LE(subChunk1Size);
    buffer.writeUInt16LE(wavHeader.audioFormat);
    buffer.writeUInt16LE(wavHeader.numChannels);
    buffer.writeUInt32LE(wavHeader.sampleRate);
    buffer.writeUInt32LE(wavHeader.byteRate);
    buffer.writeUInt16LE(wavHeader.blockAlign);
    buffer.writeUInt16LE(wavHeader.bitsPerSample);
    if (wavHeader.extraData.length != 0) {
        buffer.writeUInt16LE(wavHeader.extraData.length, 0);
        buffer.writeBuffer(wavHeader.extraData);
    }
    buffer.writeString(WAV_DATA_SUBCHUNK_ID);
    buffer.writeUInt32LE(fileLength);
    return buffer.toBuffer();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F2LWhlYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvd2F2LWhlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzNDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUM7QUFDbkMsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQztBQUNqQyxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDO0FBRTNDLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBQztBQW9CdEMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsR0FBYyxFQUFFO0lBQy9DLE9BQU87UUFDSCxXQUFXLEVBQUUsQ0FBQztRQUNkLFdBQVcsRUFBRSxDQUFDO1FBQ2QsVUFBVSxFQUFFLENBQUM7UUFDYixRQUFRLEVBQUUsQ0FBQztRQUNYLFVBQVUsRUFBRSxDQUFDO1FBQ2IsYUFBYSxFQUFFLENBQUM7UUFDaEIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQzFCLFlBQVksRUFBRSxFQUFFO0tBQ25CLENBQUM7QUFDTixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FDeEIsV0FBbUIsRUFDbkIsV0FBbUIsRUFDbkIsVUFBa0IsRUFDbEIsYUFBcUIsRUFDckIsU0FBa0IsRUFBYSxFQUFFO0lBQ2pDLE9BQU87UUFDSCxXQUFXLEVBQUUsV0FBVztRQUN4QixXQUFXLEVBQUUsV0FBVztRQUN4QixVQUFVLEVBQUUsVUFBVTtRQUN0QixRQUFRLEVBQUUsVUFBVSxHQUFHLFdBQVcsR0FBRyxhQUFhLEdBQUcsQ0FBQztRQUN0RCxVQUFVLEVBQUUsV0FBVyxHQUFHLGFBQWEsR0FBRyxD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