import test from 'ava';
import { checkQueueExists, deleteQueue, getQueue, redisOptsFromUrl, setQueue, setRedisEnableReadyCheck, setRedisMaxRetriesPerRequest } from './queue';
test('redisOptsFromUrl_generatesCorrectOptions', async (t) => {
    const inputUrl = "rediss://abc:xyz@1.2.3.4:5/6";
    const result = redisOptsFromUrl(inputUrl);
    t.is(result.port, 5);
    t.is(result.host, '1.2.3.4');
    t.is(result.db, 6);
    t.is(result.password, 'xyz');
    t.false(result.enableReadyCheck);
    t.is(result.maxRetriesPerRequest, 10);
});
test('setRedisMaxRetriesPerRequest_setsParameter', async (t) => {
    const inputMaxRetries = 20;
    const inputUrl = "rediss://abc:xyz@1.2.3.4:5/6";
    setRedisMaxRetriesPerRequest(inputMaxRetries);
    const result = redisOptsFromUrl(inputUrl);
    t.is(result.maxRetriesPerRequest, inputMaxRetries);
});
test('setRedisEnableReadyCheck_setsParameter', async (t) => {
    const inputRedisEnableReadyCheck = true;
    const inputUrl = "rediss://abc:xyz@1.2.3.4:5/6";
    setRedisEnableReadyCheck(inputRedisEnableReadyCheck);
    const result = redisOptsFromUrl(inputUrl);
    t.true(result.enableReadyCheck);
});
test('checkQueueExists_noQueue_returnsFalse', async (t) => {
    const inputQueueKey = 'checkQueueExists_noQueue_returnsFalse';
    const result = checkQueueExists(inputQueueKey);
    t.false(result);
});
test('checkQueueExists_queueExists_returnsTrue', async (t) => {
    const inputQueueKey = 'checkQueueExists_queueExists_returnsTrue';
    setQueue(inputQueueKey);
    const result = checkQueueExists(inputQueueKey);
    t.true(result);
});
test('getQueue_noQueue_returnsNewOne', async (t) => {
    const inputQueueKey = 'test_getQueue_noQueue_returnsNewOne';
    const result = getQueue(inputQueueKey, undefined);
    t.is(result.name, inputQueueKey);
});
test('getQueue_alreadyExists_returnsExistingOne', async (t) => {
    const inputQueueKey = 'getQueue_alreadyExists_returnsExistingOne';
    const result = getQueue(inputQueueKey, undefined);
    const result_2 = getQueue(inputQueueKey, undefined);
    t.is(result.name, inputQueueKey);
    t.is(result, result_2);
});
test('setQueue_noQueue_createsNewQueue', async (t) => {
    const inputQueueKey = 'setQueue_noQueue_createsNewQueue';
    const result = setQueue(inputQueueKey);
    const result_get = getQueue(inputQueueKey);
    t.is(result, result_get);
});
test('setQueue_existingQueue_updatesQueue', async (t) => {
    const inputQueueKey = 'setQueue_noQueue_createsNewQueue';
    const result = setQueue(inputQueueKey);
    const result_2 = setQueue(inputQueueKey);
    const result_get_2 = getQueue(inputQueueKey);
    t.not(result, result_2);
    t.is(result_2, result_get_2);
});
test('deleteQueue_removesExistingQueue', async (t) => {
    const inputQueueKey = 'setQueue_noQueue_createsNewQueue';
    const result = setQueue(inputQueueKey);
    deleteQueue(inputQueueKey);
    const result_2 = getQueue(inputQueueKey);
    t.not(result, result_2);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVldWUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvcXVldWUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSxLQUFLLENBQUM7QUFFdkIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLHdCQUF3QixFQUFFLDRCQUE0QixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXRKLElBQUksQ0FBQywwQ0FBMEMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDekQsTUFBTSxRQUFRLEdBQUcsOEJBQThCLENBQUM7SUFFaEQsTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFMUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsNENBQTRDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQzNELE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQztJQUMzQixNQUFNLFFBQVEsR0FBRyw4QkFBOEIsQ0FBQztJQUVoRCw0QkFB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